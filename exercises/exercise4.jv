pipeline MPipeline {
    MExtractor
    -> MArchiveInterpreter
    -> MFilePicker
    -> MCSVTextFileInterpreter
    -> MCSVInterpreter
    -> RenameColumns
    -> TableColumnDeleter
    -> FirstRowDeleter
    -> BatterieTableInterpreter
    -> CelsiusToFahrenheitTransformer
    -> CelsiusToFahrenheitBatteryTransformer
    -> BatterieLoader;

    block MExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block MArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block MFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block MCSVTextFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8";
    }

    block MCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block RenameColumns oftype TableColumnRenamer {
        rename: [
            { from: "Temperatur in °C (DWD)", to: "Temperatur" },
            { from: "Batterietemperatur in °C", to: "Batterietemperatur" }
        ];
    }

    block TableColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I, column L, column M, column N, column O];
    }

    block FirstRowDeleter oftype RowDeleter {
        delete: [row 1];
    }

    block BatterieTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "Geraet" oftype ValidGeraetNumber,
            "Hersteller" oftype text,
            "Model" oftype text,
            "Monat" oftype integer,
            "Temperatur" oftype decimal,
            "Batterietemperatur" oftype decimal,
            "Geraet aktiv" oftype text,
        ];
        multipleMeasurements: true;
        discardColumnsAfter: "Geraet aktiv";
    }

    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 1.8) + 32;
    }

    block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['Temperatur'];
        outputColumn: 'Temperatur';
        use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitBatteryTransformer oftype TableTransformer {
        inputColumns: ['Batterietemperatur'];
        outputColumn: 'Batterietemperatur';
        use: CelsiusToFahrenheit;
    }

    constraint ValidGeraetNumberRange on decimal:
        value > 0;

    valuetype ValidGeraetNumber oftype integer {
        constraints: [ValidGeraetNumberRange];
    }

    block BatterieLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}
