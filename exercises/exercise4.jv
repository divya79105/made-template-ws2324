pipeline MowestaPipeline {
   MExtractor 
    -> MArchiveInterpreter
    -> MFilePicker
    -> MFileInterpreter
    -> MCSVInterpreter
    -> TableColumnDeleter
    -> FirstRowDeleter
    -> RenameTemperaturCellWriter
    -> RenameTemperaturBatteryCellWriter
    -> BatterieTableInterpreter
    -> CelsiusToFahrenheitTransformer
    -> CelsiusToFahrenheitBatteryTransformer
    -> BatterieLoader;
    
    block MExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    } 

    block MArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    } 

    block MFilePicker oftype FilePicker {
        path: "/data.csv"; 
    }

    block MFileInterpreter oftype TextFileInterpreter{
        encoding: "utf8";
    }

    block MCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block TableColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I, column L, column M, column N, column O];
    }

    block FirstRowDeleter oftype RowDeleter {
        delete: [row 1];
    }
    block RenameTemperaturCellWriter oftype CellWriter {
        at: cell E1;
        write: ["Temperatur"]; 
    }

    block RenameTemperaturBatteryCellWriter oftype CellWriter {
        at: cell J1;
        write: ["Batterietemperatur"]; 
    }

    block BatterieTableInterpreter oftype TableInterpreter {
        header: false;
        columns: [
            "Geraet" oftype PosIntegerType,
            "Hersteller" oftype text,
            "Model" oftype text,
            "Monat" oftype integer,
            "Temperatur" oftype decimal,
            "Batterietemperatur" oftype decimal,
            "Geraet aktiv" oftype text,
        ];
    }
    transform CelsiusToFahrenheit {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;
        fahrenheit: (celsius * 9/5) + 32;
    }

    block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ["Temperatur"];
        outputColumn: "Temperatur";
        use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitBatteryTransformer oftype TableTransformer {
        inputColumns: ["Batterietemperatur"];
        outputColumn: "Batterietemperatur";
        use: CelsiusToFahrenheit;
    }

    block BatterieLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
    constraint PostRange oftype RangeConstraint {
        lowerBound: 1;
        lowerBoundInclusive: true;
    }
}

